Software signing is an important aspect of security. It provides us with a greater sense of confidence that the software we're running on your systems has not been tampered with after being released by the software publisher. Docker Content Trust establishes signing for Docker images. In this lesson, we will briefly discuss what Docker Content Trust is. Additionally, we will cover how to sign images, run signed images, plus how to enable, and disable Docker Content Trust.

Relevant Documentation:-
https://docs.docker.com/engine/security/trust/content_trust/#push-trusted-content

Lesson Reference:-
In order to follow along with this lesson, a Docker Hub account is required. An account can be created for free at https://hub.docker.com.

Solution:
----------------------------------------------------------------------------------------------------------------------------------------------
 1) First, log in to Docker Hub. Enter your Docker Hub credentials when prompted.
       $ docker login

 2) Generate a delegation key pair. We can enter a passphrase of our choosing, but make note of it as we will need it later on in the lesson.
       $ cd ~/
       docker trust key generate shankarb
       docker trust key generate 7795229148
--------------------------------------------------------------------------------------------------------------------------------------------------
docker@default:~ $ docker login
Login with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one.
Username: 7795229148
Password:
WARNING! Your password will be stored unencrypted in /home/docker/.docker/config.json.
Configure a credential helper to remove this warning. See
https://docs.docker.com/engine/reference/commandline/login/#credentials-store

Login Succeeded
docker@default:~$ cd ..
docker@default:/home$ cd ~/
docker@default:~$ pwd
/home/docker

----------------------------------------------------------------------------------------------------------------------------------------------
docker@default:~$ docker trust key generate 9741223883
Generating key for 7795229148...
Enter passphrase for new 7795229148key with ID d428ba4:
Repeat passphrase for new 7795229148key with ID d428ba4:
Successfully generated and loaded private key. Corresponding public key available: 7795229148

------------------------------------------------------------------------------------------------------------------------------------------------

Then we'll add ourselves as a signer to an image repository. Once again, be sure to make note of the passphrases used.
docker trust signer add --key shankarb.pub shankarb shankarb /dct-test

        $ docker trust signer add --key /home/docker/7795229148.pub 7795229148 7795229148/dct-test


Create and build a simple Docker image with an unsigned tag, and then push it to Docker Hub:
        $ mkdir ~/dct-test
        $ cd dct-test

        $ vi Dockerfile

FROM busybox:latest
CMD echo It worked!

docker build -t shankarb/dct-test:unsigned
docker build -t 7795229148/dct-test:unsigned

docker push shankarb/dct-test:unsigned
docker push 7795229148/dct-test:unsigned

Run the image to verify whether it can run successfully:
docker run shankarb/dct-test:unsigned
docker run 7795229148/dct-test:unsigned

Next, enable Docker content trust and attempt to run the unsigned image again:
Note: We should see it fail.

export DOCKER_CONTENT_TRUST=1
docker run shankarb/dct-test:unsigned
docker run 7795229148/dct-test:unsigned

docker@default:~/dct-test$ docker run 7795229148/dct-test:unsigned
docker: Error: remote trust data does not exist for docker.io/7795229148/dct-test: notary.docker.io does not have trust data for docker.io/7795229148/dct-test.
See 'docker run --help'.
---
---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Build and push a signed tag to the repo. Enter the passphrase — 
this will be the one that was chosen earlier when running the docker trust key generate command:

docker build -t shankarb/dct-test:signed .
docker build -t 7795229148/dct-test:signed .

docker push shankarb/dct-test:signed
docker push 7795229148/dct-test:signed

docker@default:~/dct-test$ docker push 7795229148/dct-test:signed
The push refers to repository [docker.io/7795229148/dct-test]
6c0ea40aef9d: Layer already exists
signed: digest: sha256:540b54a3d9efca1ce07b4133c3bb986e340fbeaf03522b77c02c16be3e5a014c size: 527
Signing and pushing trust metadata
Enter passphrase for 7795229148 key with ID d428ba4:
Successfully signed docker.io/7795229148/dct-test:signed

docker trust sign shankarb/dct-test:signed
docker trust sign 7795229148/dct-test:signed

-----------------------------------------------------------------------------------------------------------------------------------------------------

Run it to verify that the signed image can run properly with Docker Content Trust enabled:

docker image rm shankarb/dct-test:signed
docker image rm 7795229148/dct-test:signed

docker run shankarb/dct-test:signed
docker run 7795229148/dct-test:signed

docker@default:~/dct-test$ docker image rm 7795229148/dct-test:signed
Untagged: 7795229148/dct-test:signed
docker@default:~/dct-test$ docker run 7795229148/dct-test:signed
It worked!

-----------------------------------------------------------------------------------------------------------------------------------------------------

Turn off Docker Content Trust and attempt to run the unsigned image again:
Note: It should work this time.

export DOCKER_CONTENT_TRUST=0
docker run shankarb/dct-test:unsigned
docker run 7795229148/dct-test:unsigned

docker@default:~/dct-test$ docker run 7795229148/dct-test:unsigned
