Assignment

NOTE: Do not forget to see manual page using "--help" option in command when searching for options/commands for a particular task.

1. Install Docker, either on your native OS or on a VM. Make sure it runs. type "docker -v" to check if it's installed.
 
	$docker --help  ---> This command shows all available options and commands to work with images and containers
	$docker images --help ---> This command shows all the avaialble options and commands to work with docker images
	$docker ps --help ---> This command shows all the avaialble options and commands to work with docker containers

2. Find a image from dockerhub of your choice(recommeded: nginx), don't use browser, pull the official image from dockerhub.

        $docker pull nginx        

3. List all the available images in your machine/vm, make sure you see recently pulled image in the list.

        $docker images -a OR $docker images

4. Find out the "Full" ImageId of the image that you pulled and write it below.
     
         $docker images --no trunc | grep nginx --
         O/P: sha256:540a289bab6cb1bf880086a9b803cf0c4cefe38cbb5cdefa199b69614525     
        
5. Create a container of your image 

         $docker ps -a -- to check all the containers
         $docker run --name nginxcontainer -p 80:80 -d nginx -- to create new container for nginx image

6. List all the running containers

        $docker ps -- this command is used to check all the running containers.

7. List all the running and stopped containers

        $docker ps -a -- it lists all the running containers
        $docker ps -f "status=exited"


8. Find out the "Full" containerId of the container and write it below.

        $docker ps --no-trunc | grep mynginx  -- a2720f3dccc270f46ab15b423f355d74c336696e1a8adb96d936910002702506
              or
        $docker inspect --format="{{.Id}}" redis
        O/P: sha256:4760dc956b2ddc9ac1c508936e39b63a22c6f0640ef58c1b10ff73f04e253ffe this is the full container id

9. Find out how many image layers are used to build this image.

        $docker history nginx

10. Get the Apache Tomcat 7 server image from the docker hub.

        $docker pull tomact:7.0 -- it pulls the image apache tomact 7 version from docker hub.

11. Run the Apache Tomcat 7, I mean create a container of Apache Tomcat.

         $docker run -d --name mytomcat tomcat:7.0
         container full id for apachetomact7 -->  b7e36741d2c1384561d9b762dbb090204333bc08777aee70afc9777aec9acac0

12. Find out what is the IP Address of the Apache Tomcat Container that it is running on

        $docker inspect  b7e36741d2c1384561d9b762dbb090204333bc08777aee70afc9777aec9acac0 | grep "IPAddress"

         "IPAddress": "172.18.0.2"

13. Which Port it is using?

         $docker inspect f949e7d76d63
         0.0.0.0:8888->8080/tcp

14. Try to access the Tomcat's home page from your machine/vm.


15. What is the disk size of Apache Tomcat image?

           $docker image ls | grep tomcat
           size is 506 mb

16. Find out list of all environment variables that is configured for tomcat image, can you see JAVA_HOME and CATALINA_HOME? What did you notice about it?
17. Find out which port is exposed for tomcat?

         $docker inspect b7e36741d2c1384561d9b762dbb090204333bc08777aee70afc9777aec9acac0 | grep ExposedPort

18. Run multiple conntainers of tomcat on different port and access it's home page.

        $docker run -d -p 8001:8080 --name mytomcat1 tomcat:7.0
        O/P: 1188db8657ca0c37e1a2eb5345d2a9b341d9e73ea1274f080e3f97ddfa3bf89d
    
        $docker run -d -p 8002:8080 --name mytomcat2 tomcat:7.0
        O/P: 2167abb4b10aef82fb54fa1c6605255736471c27fa06e03b02c37d5ff382c8ec

        $docker ps | grep tomcat


19. Pull ubuntu os from dockerhub, try to pull 2 images of ubuntu, Except the latest one.

         $docker pull ubuntu:18.10 
         $docker pull ubuntu<versions> -- you can download different versions of ubuntu by using this command.

20. Run the container of ubuntu in attached mode.

         $docker run -it --name myubuntutest ubuntu:18.10  -- 0e248c9b7e62137c8002f3548c5552cc0370ab5865989fedadd6b23780320357

21. Run the container of another ubuntu in detached mode.
     
         $docker run -d --name myubuntu2 ubuntu:18.10

22. Check how many ubuntu containers are running and stopped

          $docker ps -a | grep ubuntu
          $docker ps -a | grep tomcat


23. Is the tomcat container running? If no, start one.

         $docker start 463ff4c1a332 -- for ubuntu
         $docker start 1188db8657ca -- for tomcat
 

24. Check the logs, generated by tomcat container(don't forget to make request to tomcat's home page to see the log).

         $docker logs -f 2167abb4b10a 

25. Check if ubuntu conatiner is running? If no, start one in attached mode to the terminal.

          $docker start --attach 463ff4c1a332        
          $docker start --attach 1188db8657ca 

26. Login as root user in ubuntu container

          $docker exec --user root -it 1188db8657ca /bin/bash

27. Create a file with any name in root directory

         cat > file.txt

28. Install software of your choice in ubuntu container using "apt-get install"

          $apt-get install zip

29. Now exit the ubuntu shell, are you back to your host machine, if not, come back to the host machine.

       root@42d1c27fbb30:~# exit

30. Check if the ubuntu container is running.

           $docker ps

31. Create a new ubuntu container out of the same image as that previous container in attached mode.

          $docker run -it --name myubuntutest ubuntu:18.10

32. Login as a root user
     Ans# In attached mode by default it is logging with root.

33. Check if you can see the file created in previous container, you will not see the file as well as software that you installed in the previous container. Now kill this Container.

       File not available as this is new container
     
          cd root
          ls –l

34. Do you have the previous ubuntu container where you created the file and installed the software? If no reapeat step 25 to 29.
35. Create an Image out of the existing container.

     $docker commit d465715fe4cc ubuntufromcontainer 
36. Now Create a Container out of this image and login into it to see if you can see the file and software installed by you in the previous container.

     $docker run -it --name ubuntufrompreviouscont ubuntufromcontainer

37. Do you have running tomcat container? If yes, Stop it and kill all tomcat container.

               $docker stop 2167abb4b10a  
               $docker kill ps -a 

38. Create an index.html file with following code in it:-
	# <h1>This is Tomcat Container</h1>
       Now, Start a tomcat container in such a way that on hitting its URL for home page it should show the above html page.

39. type below command:-
	$docker images --help
Now, try to run command that proves the concept of following three options:-
1. -a
2. -f
3. -q

        $docker images -a , -all -- it shows the all avaiable images
        $docker images -f -- 
        $docker images -q  -- it shows the numeric id of image



write atleast 1 command using each option above and prove their concepts as described in the --help.


40. type below command:-
$docker ps --help
       Now, try to run command that proves the concept of following six options:-
1. -a
2. -f
3. -q
4. -n
5. -l
6. -s

        $docker ps -a -- shows all containers
        $docker ps -q -- shows only running container
        $docker ps -f --it can filter the container
        $docker ps –n – it used to display last containers created like 1 ,2 3
        $docker ps -l -- it shows the latest container
        4docker ps -s -- it shows the size of the container

